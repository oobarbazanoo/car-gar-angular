/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const CarsApiBaseUrl = new InjectionToken<string>('CarsApiBaseUrl');

@Injectable()
export class CarsApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(CarsApiBaseUrl) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    cars(): Observable<CarsResponse> {
        let url_ = this.baseUrl + "/cars";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCars(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCars(<any>response_);
                } catch (e) {
                    return <Observable<CarsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CarsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCars(response: HttpResponseBase): Observable<CarsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CarsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CarsResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    car(body: GetCarRequest | undefined): Observable<CarResponse> {
        let url_ = this.baseUrl + "/car";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCar(<any>response_);
                } catch (e) {
                    return <Observable<CarResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CarResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCar(response: HttpResponseBase): Observable<CarResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CarResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CarResponse>(<any>null);
    }
}

export class Warehouse implements IWarehouse {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;

    constructor(data?: IWarehouse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.location = _data["location"];
        }
    }

    static fromJS(data: any): Warehouse {
        data = typeof data === 'object' ? data : {};
        let result = new Warehouse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["location"] = this.location;
        return data; 
    }
}

export interface IWarehouse {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
}

export class Car implements ICar {
    warehouseId?: number;
    id?: number;
    model?: string | undefined;
    licensed?: boolean;
    added?: Date;

    constructor(data?: ICar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"];
            this.id = _data["id"];
            this.model = _data["model"];
            this.licensed = _data["licensed"];
            this.added = _data["added"] ? new Date(_data["added"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Car {
        data = typeof data === 'object' ? data : {};
        let result = new Car();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId;
        data["id"] = this.id;
        data["model"] = this.model;
        data["licensed"] = this.licensed;
        data["added"] = this.added ? this.added.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICar {
    warehouseId?: number;
    id?: number;
    model?: string | undefined;
    licensed?: boolean;
    added?: Date;
}

export class CarsResponse implements ICarsResponse {
    warehouses?: Warehouse[] | undefined;
    allCars?: Car[] | undefined;

    constructor(data?: ICarsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["warehouses"])) {
                this.warehouses = [] as any;
                for (let item of _data["warehouses"])
                    this.warehouses!.push(Warehouse.fromJS(item));
            }
            if (Array.isArray(_data["allCars"])) {
                this.allCars = [] as any;
                for (let item of _data["allCars"])
                    this.allCars!.push(Car.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CarsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CarsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.warehouses)) {
            data["warehouses"] = [];
            for (let item of this.warehouses)
                data["warehouses"].push(item.toJSON());
        }
        if (Array.isArray(this.allCars)) {
            data["allCars"] = [];
            for (let item of this.allCars)
                data["allCars"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICarsResponse {
    warehouses?: Warehouse[] | undefined;
    allCars?: Car[] | undefined;
}

export class GetCarRequest implements IGetCarRequest {
    warehouseId?: number;
    carId?: number;

    constructor(data?: IGetCarRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"];
            this.carId = _data["carId"];
        }
    }

    static fromJS(data: any): GetCarRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCarRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId;
        data["carId"] = this.carId;
        return data; 
    }
}

export interface IGetCarRequest {
    warehouseId?: number;
    carId?: number;
}

export class CarResponse implements ICarResponse {
    warehouseId?: number;
    id?: number;
    make?: string | undefined;
    model?: string | undefined;
    yearModel?: number;
    price?: number;
    licensed?: boolean;
    added?: Date;
    warehouseName?: string | undefined;
    warehouseLocation?: string | undefined;

    constructor(data?: ICarResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"];
            this.id = _data["id"];
            this.make = _data["make"];
            this.model = _data["model"];
            this.yearModel = _data["yearModel"];
            this.price = _data["price"];
            this.licensed = _data["licensed"];
            this.added = _data["added"] ? new Date(_data["added"].toString()) : <any>undefined;
            this.warehouseName = _data["warehouseName"];
            this.warehouseLocation = _data["warehouseLocation"];
        }
    }

    static fromJS(data: any): CarResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CarResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId;
        data["id"] = this.id;
        data["make"] = this.make;
        data["model"] = this.model;
        data["yearModel"] = this.yearModel;
        data["price"] = this.price;
        data["licensed"] = this.licensed;
        data["added"] = this.added ? this.added.toISOString() : <any>undefined;
        data["warehouseName"] = this.warehouseName;
        data["warehouseLocation"] = this.warehouseLocation;
        return data; 
    }
}

export interface ICarResponse {
    warehouseId?: number;
    id?: number;
    make?: string | undefined;
    model?: string | undefined;
    yearModel?: number;
    price?: number;
    licensed?: boolean;
    added?: Date;
    warehouseName?: string | undefined;
    warehouseLocation?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}